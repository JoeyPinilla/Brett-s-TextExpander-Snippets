<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>groupInfo</key>
	<dict>
		<key>expandAfterMode</key>
		<integer>2</integer>
		<key>groupName</key>
		<string>Tools</string>
	</dict>
	<key>snippetsTE2</key>
	<array>
		<dict>
			<key>abbreviation</key>
			<string>,,mad</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2011-10-15T05:44:20Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Make a date</string>
			<key>lastUsed</key>
			<date>2011-10-15T10:27:42Z</date>
			<key>modificationDate</key>
			<date>2011-10-15T10:27:23Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env php
&lt;?php
date_default_timezone_set("America/Chicago");
$dateformat = "l, M jS, Y";
$timeformat = " \a\\t g:ia";
$debug = 2;

$input=










				"%fill:Date string%";
				// mon, tue, next fri, tomorrow 3pm...
				// 1, 3, -2 (days), 30 minutes...
				// avoid "on" and "at", keep it simple.







if ( preg_match( "/^([+-])?(\d+)$/", trim($input), $matches ) ) 
{
  $input = $matches[2] . " days";
  if ($matches[1] == "-") $input .= " ago";
} 
else if ( preg_match("/([ap]m|noon|midnight|hours|minutes)/i",trim($input),$matches) ) 
{
  $dateformat .= $timeformat;
}

if (($timestamp = strtotime("$input")) === false) 
{
  if($debug &gt; 1) 
    `/usr/local/bin/growlnotify -a TextExpander -t "Natural language FAIL" -m "I can't understand you when you mumble"`;
  if ($debug &gt; 0) 
	die('Derp');
} 
else 
{
  echo date($dateformat,$timestamp);
}</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>0</integer>
			<key>uuidString</key>
			<string>3D01857D-D034-4694-B889-2A37B627B635</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,tid</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-06-06T13:52:20Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>AS Text Item Delimiter</string>
			<key>lastUsed</key>
			<date>2011-10-04T20:45:42Z</date>
			<key>modificationDate</key>
			<date>2011-09-02T04:06:29Z</date>
			<key>plainText</key>
			<string>set {astid, AppleScript's text item delimiters} to {AppleScript's text item delimiters, "%|"}
set AppleScript's text item delimiters to astid</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>16</integer>
			<key>uuidString</key>
			<string>B673B52A-5F38-4862-8CDC-B856BBC3E1EE</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,avg</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2011-09-02T03:14:39Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Average numbers in clipboard</string>
			<key>lastUsed</key>
			<date>2011-09-02T23:29:10Z</date>
			<key>modificationDate</key>
			<date>2011-09-02T03:17:10Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby

def ts( number )
  number.to_s.reverse.scan(/(?:\d*\.)?\d{1,3}-?/).join(',').reverse
end

def do_average(text)
  arr = text.scan(/\.?\d[\d,]+(?:\.\d+)?/).map{|line| 
    line.gsub(/[^\d\.]/,'').to_f
  }.sort

  return ts(arr.inject(0.0) { |sum,el| sum + el } / arr.size ) unless arr.empty?
end


print do_average %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>2</integer>
			<key>uuidString</key>
			<string>B9DF76C5-53EE-4146-9FF0-4B8B53F3B50A</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,-</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-30T03:59:07Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Hyphenate clipboard</string>
			<key>lastUsed</key>
			<date>2011-09-02T04:48:17Z</date>
			<key>modificationDate</key>
			<date>2011-09-02T04:47:50Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby

clip = %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}
print clip.gsub(/\b\s\b/,'-')</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>19</integer>
			<key>uuidString</key>
			<string>7DF920C1-6B06-4B7F-BA80-19C67C5637B0</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,dummy</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-08-03T18:45:58Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Dummy Image</string>
			<key>lastUsed</key>
			<date>2011-03-01T01:14:23Z</date>
			<key>modificationDate</key>
			<date>2010-10-13T15:08:58Z</date>
			<key>plainText</key>
			<string>&lt;img src="http://placehold.it/%fill:width%x%fill:height%/333333/dddddd&amp;text=%fill:title%" alt="%fill:title%" width="%fill:width%" height="%fill:height%" /&gt;</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>9</integer>
			<key>uuidString</key>
			<string>91FEE5DC-C0A0-4F79-A5F7-71963F28BDBD</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,kittyg</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-08-03T18:45:58Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Kitty Placeholder - Grey</string>
			<key>lastUsed</key>
			<date>2011-04-23T09:00:09Z</date>
			<key>modificationDate</key>
			<date>2011-03-01T01:12:44Z</date>
			<key>plainText</key>
			<string>&lt;img src="http://placekitten.com/g/%fill:width%/%fill:height%" alt="KITTEH %fill:width%x%fill:height%" width="%fill:width%" height="%fill:height%" /&gt;</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>11</integer>
			<key>uuidString</key>
			<string>B3728814-C136-406B-995B-E97AD43C2423</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,kittyc</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-08-03T18:45:58Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Kitty Placeholder - Color</string>
			<key>lastUsed</key>
			<date>2011-03-01T01:30:09Z</date>
			<key>modificationDate</key>
			<date>2011-03-01T01:12:49Z</date>
			<key>plainText</key>
			<string>&lt;img src="http://placekitten.com/%fill:width%/%fill:height%" alt="KITTEH %fill:width%x%fill:height%" width="%fill:width%" height="%fill:height%" /&gt;</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>13</integer>
			<key>uuidString</key>
			<string>DF8219A5-343F-4655-95F8-C566C59F831F</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,email</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-05-08T00:57:58Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Encode email address</string>
			<key>lastUsed</key>
			<date>2010-05-08T01:00:42Z</date>
			<key>modificationDate</key>
			<date>2010-10-13T15:08:46Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

clipboard = %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
print "mailto:#{$2.gsub(/./) {sprintf("&amp;#x%02X;", $&amp;.unpack("U")[0])}}" if clipboard =~ /\A(mailto:)?(.*?@.*\..*)\z/</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>1</integer>
			<key>uuidString</key>
			<string>2A222F67-844F-42E4-915D-1B2B337EE091</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,href</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2009-10-28T10:50:26Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Clipboard HTML Link</string>
			<key>lastUsed</key>
			<date>2010-06-07T12:39:55Z</date>
			<key>modificationDate</key>
			<date>2010-05-05T20:04:04Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\A(mailto:)?(.*?@.*\..*)\z}:
    "mailto:#{$2.gsub(/./) {sprintf("&amp;#x%02X;", $&amp;.unpack("U")[0])}}"
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
print %Q{&lt;a href="#{url}"&gt;%fill:Link Text%&lt;/a&gt;}</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>26</integer>
			<key>uuidString</key>
			<string>6E8F0D03-3DFD-4079-8EC5-06D7FD3CB484</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,jq</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-11-10T09:03:04Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>jQuery Wrapper</string>
			<key>lastUsed</key>
			<date>2011-09-13T15:12:48Z</date>
			<key>modificationDate</key>
			<date>2010-11-10T09:03:44Z</date>
			<key>plainText</key>
			<string>(function($){%|})(jQuery);</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>32</integer>
			<key>uuidString</key>
			<string>BA3B1F24-FE34-4377-8024-2D00145F5533</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,mdr</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-05-08T00:39:31Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Paste Markdown References</string>
			<key>lastUsed</key>
			<date>2010-10-13T15:35:06Z</date>
			<key>modificationDate</key>
			<date>2011-04-23T09:58:24Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby
=begin
Parses the clipboard for urls
if it finds 1 or more, paste them as a list of markdown references
if the links in the clipboard are already in markdown reference format, it preserves their names and sorts the references
=end

clipboard = "%x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip"
links = clipboard.scan /(?:\[([^\]]+)\]\: )?(https?:\/\/[^ \n\r"]+)/m
norepeat = []
output = []
exit if links.nil?

links.each {|url|
  fresh = true
  output.each {|a|
    fresh = false if a['link'] == url[1]
  }
  next unless fresh

	if url[0].nil?
		domain = url[1].match(/https?:\/\/([^\/]+)/)
		parts = domain[1].split('.')
		name = case parts.length
			when 1,2: parts[0]
			else parts[1]
		end
	else
		name = url[0]
	end

  name = "itunes" if url[1] =~ /(itunes|phobos).apple.com/

	while norepeat.include? name
		name = name =~ / ?[0-9]$/ ? name.next! : name = name + " 2"
	end
	output &lt;&lt; {'title' =&gt; name, 'link' =&gt; url[1] }
	norepeat.push name
}

output.sort {|a,b| a['title'] &lt;=&gt; b['title']}.each { |x| puts "[#{x['title']}]: #{x['link']}" }</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>5</integer>
			<key>uuidString</key>
			<string>543CC81E-F03B-42DF-A6E1-7F5D17BF1D1C</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,mlink</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-03-13T14:09:14Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Markdown Link</string>
			<key>lastUsed</key>
			<date>2011-02-17T16:17:00Z</date>
			<key>modificationDate</key>
			<date>2011-02-17T16:17:37Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\A(mailto:)?(.*?@.*\..*)\z}:
    "mailto:#{$2.gsub(/./) {sprintf("&amp;#x%02X;", $&amp;.unpack("U")[0])}}"
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
print %Q{[%fill:Link Text%](#{url})}</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>24</integer>
			<key>uuidString</key>
			<string>E63A4AC2-4E3B-4DA3-9C2C-9A0348E1F2A9</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,sub</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-29T18:35:28Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Shorten clipboard (bit.ly)</string>
			<key>lastUsed</key>
			<date>2011-05-05T13:28:30Z</date>
			<key>modificationDate</key>
			<date>2010-10-18T23:42:18Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

require 'open-uri'
require 'cgi'

USER_NAME = 'ttscoff' # Your login name
API_KEY = 'R_4a4c6a9421a9e73a4682268eca599be1' # http://bit.ly/a/your_api_key

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end


url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip

res = open("http://api.bit.ly/v3/shorten?login=#{USER_NAME}&amp;apiKey=#{API_KEY}&amp;longUrl=#{CGI.escape(url)}&amp;format=txt").read unless url.nil?

begin
  print res unless res.nil?
rescue
  exit
end</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>25</integer>
			<key>uuidString</key>
			<string>E9B7CD10-52FB-469D-902E-ED17BF227E72</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,sug</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-29T18:35:28Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Shorten clipboard (go.)</string>
			<key>lastUsed</key>
			<date>2010-05-07T19:04:20Z</date>
			<key>modificationDate</key>
			<date>2010-05-05T20:02:34Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

require 'net/http'
require 'cgi'

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end


input = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
exit if input.nil?
http = Net::HTTP.new('to.')
path = '/'
data = "url=#{CGI.escape(input.strip)}"
headers = {'Content-Type' =&gt; 'application/x-www-form-urlencoded'}
resp, data = http.post(path, data, headers)
if resp.code.to_i == 200
  print data.split(/value="/)[1].split(/"/)[0]
else
  print input
end</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>7</integer>
			<key>uuidString</key>
			<string>DB17EAC0-7C04-4C31-A540-7BA19291AE12</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,sui</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-29T18:35:28Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Shorten clipboard (is.gd)</string>
			<key>lastUsed</key>
			<date>2010-12-14T21:28:39Z</date>
			<key>modificationDate</key>
			<date>2010-05-05T20:02:39Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

require 'open-uri'
require 'cgi'

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip

print open("http://is.gd/api.php?longurl=#{CGI.escape(url)}").read unless url.nil?</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>20</integer>
			<key>uuidString</key>
			<string>724060A0-1041-4CDB-87BD-70D0D8C9BE93</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,sut</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-29T18:35:28Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Shorten clipboard (tinyurl)</string>
			<key>lastUsed</key>
			<date>2011-04-20T11:13:11Z</date>
			<key>modificationDate</key>
			<date>2010-05-05T20:02:44Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

require 'open-uri'
require 'cgi'

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip

print open("http://tinyurl.com/api-create.php?url=#{CGI.escape(url)}").read unless url.nil?</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>38</integer>
			<key>uuidString</key>
			<string>E20D335C-5408-4340-86FB-BA964B6078F8</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,url</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2009-10-28T10:54:02Z</date>
			<key>flags</key>
			<integer>2</integer>
			<key>label</key>
			<string>Make URL</string>
			<key>lastUsed</key>
			<date>2011-04-23T09:06:48Z</date>
			<key>modificationDate</key>
			<date>2011-04-23T09:06:57Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby -wKU

def entity_escape(text)
  text.gsub(/&amp;(?!([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+);)/, '&amp;amp;')
end

def make_link(text)
  case text
  when %r{\A(mailto:)?(.*?@.*\..*)\z}:
    "mailto:#{$2}"
  when %r{\Ahttps?://.*?\.\w{2,4}.*?\z}:
    entity_escape(text)
  when %r{\A(www\..*|.*\.\w{2,4})\z}:
    "http://#{entity_escape text}"
  when %r{\A.*?\.\w{2,4}\/?.*\z}:
    "http://#{entity_escape text}"
  else
    nil
  end
end

url = make_link %x{__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbpaste}.strip
print url unless url.nil?</string>
			<key>snippetType</key>
			<integer>3</integer>
			<key>useCount</key>
			<integer>29</integer>
			<key>uuidString</key>
			<string>A1B1C5EA-9ECD-48E0-A19F-60281D7CA491</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>#!b</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-26T12:40:27Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Hashbang, Bash</string>
			<key>lastUsed</key>
			<date>2011-09-02T04:48:55Z</date>
			<key>modificationDate</key>
			<date>2011-09-02T04:49:35Z</date>
			<key>plainText</key>
			<string>#!/bin/bash</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>1</integer>
			<key>uuidString</key>
			<string>EC854A0B-6026-468C-BECC-4D1F7CCFD0DD</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>#!o</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-04-26T12:41:23Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Hashbang, osascript</string>
			<key>modificationDate</key>
			<date>2010-05-08T01:02:40Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env osascript</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>0</integer>
			<key>uuidString</key>
			<string>D6DD8684-7043-49F1-B591-974DF71134B1</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>#!r</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2010-03-13T14:10:51Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Hashbang, Ruby</string>
			<key>lastUsed</key>
			<date>2011-09-11T00:57:54Z</date>
			<key>modificationDate</key>
			<date>2011-04-23T08:51:22Z</date>
			<key>plainText</key>
			<string>#!/usr/bin/env ruby</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>9</integer>
			<key>uuidString</key>
			<string>5130B2BB-C47F-4BCC-9000-376F86A1123D</string>
		</dict>
		<dict>
			<key>abbreviation</key>
			<string>,,linkme</string>
			<key>abbreviationMode</key>
			<integer>0</integer>
			<key>creationDate</key>
			<date>2011-06-24T17:31:56Z</date>
			<key>flags</key>
			<integer>0</integer>
			<key>label</key>
			<string>Link reminder</string>
			<key>lastUsed</key>
			<date>2011-06-24T17:32:54Z</date>
			<key>modificationDate</key>
			<date>2011-09-02T04:01:52Z</date>
			<key>plainText</key>
			<string>(///LINK///)</string>
			<key>snippetType</key>
			<integer>0</integer>
			<key>useCount</key>
			<integer>2</integer>
			<key>uuidString</key>
			<string>BCB1820B-7B40-45FE-BEBA-94A00A8174E5</string>
		</dict>
	</array>
</dict>
</plist>
